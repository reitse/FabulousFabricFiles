{"name":"df Replace StackOverflow data","ppdf:dataflowId":"759a80ed-da8a-4aa3-9736-9d30e4d420a5","ppdf:owner":{"tenantId":"e2c852c9-a592-4198-8b26-76695664931e","userId":"aefcfa2c-e7f1-4392-b701-cffd823e827d"},"ppdf:fastCopy":false,"version":"1.0","culture":"en-US","modifiedTime":"2023-08-01T10:45:50.1390442+00:00","ppdf:outputFileFormat":"Parquet","pbi:mashup":{"fastCombine":false,"allowNativeQueries":false,"queriesMetadata":{"DefaultDestination":{"queryId":"1cdb0d4e-39a2-4cf9-ad1e-883de115135e","queryName":"DefaultDestination"},"Badges":{"queryId":"6c3d039e-432d-45d7-88d4-279389426a80","queryName":"Badges"},"Comments":{"queryId":"81aec1da-b781-4b93-95ba-fbe38750e350","queryName":"Comments"},"LinkTypes":{"queryId":"9ce86547-7b18-439e-aa0f-664f9015ab2c","queryName":"LinkTypes"},"PostLinks":{"queryId":"a36bc9a7-0f16-463a-817b-2efe52fd2f9d","queryName":"PostLinks"},"Posts":{"queryId":"5f5ef593-02b2-45a5-8e6b-b2b56009a757","queryName":"Posts"},"PostTypes":{"queryId":"34b817a2-0d55-4aa7-b833-3709549cfe4d","queryName":"PostTypes"},"Users":{"queryId":"1febcc7c-9c5f-47b4-a386-05c5dd534854","queryName":"Users"},"Votes":{"queryId":"f0f49722-d9b6-440d-b723-6ef357c05371","queryName":"Votes"},"VoteTypes":{"queryId":"d647c8a1-d708-467d-9171-3cc53d205bd6","queryName":"VoteTypes"},"DestinationForWriteToDatabaseTableFrom_Badges":{"queryId":"6c71318c-9b83-47ba-b9b5-9378a46c5c9b","queryName":"DestinationForWriteToDatabaseTableFrom_Badges"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges":{"queryId":"a8bd02e4-373d-4a9a-a0d1-ee682870f1bd","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges"},"TransformForOutputToDatabaseTableFrom_Badges":{"queryId":"d946718a-93af-406e-8a6a-155e31a322c3","queryName":"TransformForOutputToDatabaseTableFrom_Badges"},"DefaultModelStorage":{"queryId":"654c592c-f38e-465f-a803-6a48c0f61cbd","queryName":"DefaultModelStorage"},"DestinationForWriteToDatabaseTableFrom_Comments":{"queryId":"98aba620-5bfd-4092-b85f-447ffdd8e861","queryName":"DestinationForWriteToDatabaseTableFrom_Comments"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments":{"queryId":"8e4e1a25-c15b-4e6c-917b-2d4a28ebbb56","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments"},"TransformForOutputToDatabaseTableFrom_Comments":{"queryId":"8e1bbf03-b623-4136-bf71-cfe6fa322b6c","queryName":"TransformForOutputToDatabaseTableFrom_Comments"},"DestinationForWriteToDatabaseTableFrom_LinkTypes":{"queryId":"9c79ac71-d2bc-4142-b453-8638736c4191","queryName":"DestinationForWriteToDatabaseTableFrom_LinkTypes"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes":{"queryId":"973acf11-412b-4d49-b6a0-0df96b483f11","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes"},"TransformForOutputToDatabaseTableFrom_LinkTypes":{"queryId":"9415dbf1-b3b0-4fa1-9988-633286421ae2","queryName":"TransformForOutputToDatabaseTableFrom_LinkTypes"},"DestinationForWriteToDatabaseTableFrom_PostLinks":{"queryId":"b0a67212-deec-4c25-9fbb-71101c454d1b","queryName":"DestinationForWriteToDatabaseTableFrom_PostLinks"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks":{"queryId":"93458925-e37b-40d7-a53c-5467a0a50cba","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks"},"TransformForOutputToDatabaseTableFrom_PostLinks":{"queryId":"9819598d-c7bd-4b5c-897c-17f0cf5912c5","queryName":"TransformForOutputToDatabaseTableFrom_PostLinks"},"DestinationForWriteToDatabaseTableFrom_PostTypes":{"queryId":"627a2a3f-6b9e-4ee0-aa7c-a43f7b777c16","queryName":"DestinationForWriteToDatabaseTableFrom_PostTypes"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes":{"queryId":"3087b5e5-d471-47ea-866d-261b2aa1bdc7","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes"},"TransformForOutputToDatabaseTableFrom_PostTypes":{"queryId":"21322ea7-9a00-412f-a7d5-15752f8cd646","queryName":"TransformForOutputToDatabaseTableFrom_PostTypes"},"DestinationForWriteToDatabaseTableFrom_Posts":{"queryId":"5c1d0d51-3e4c-40c3-b2f4-dbd5bf6f0622","queryName":"DestinationForWriteToDatabaseTableFrom_Posts"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts":{"queryId":"cb1b1592-653d-42c7-8da4-20bc2f7bf6ef","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts"},"TransformForOutputToDatabaseTableFrom_Posts":{"queryId":"1348fecd-a3d0-482a-9d3e-608934eb61fd","queryName":"TransformForOutputToDatabaseTableFrom_Posts"},"DestinationForWriteToDatabaseTableFrom_Users":{"queryId":"e752142e-673b-47a4-8889-db43eeec1548","queryName":"DestinationForWriteToDatabaseTableFrom_Users"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users":{"queryId":"7053a913-9c09-4903-af73-a5e2ca9ea958","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users"},"TransformForOutputToDatabaseTableFrom_Users":{"queryId":"67fcfbab-a216-48c4-a11b-f62b9738b75e","queryName":"TransformForOutputToDatabaseTableFrom_Users"},"DestinationForWriteToDatabaseTableFrom_VoteTypes":{"queryId":"33422a15-c275-4409-8be4-2da38773c1dc","queryName":"DestinationForWriteToDatabaseTableFrom_VoteTypes"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes":{"queryId":"310a231e-0a20-43a8-a6f1-fd9d5a83439e","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes"},"TransformForOutputToDatabaseTableFrom_VoteTypes":{"queryId":"fde2fc65-82d9-4b9f-bd6f-5b7c42fce2bc","queryName":"TransformForOutputToDatabaseTableFrom_VoteTypes"},"DestinationForWriteToDatabaseTableFrom_Votes":{"queryId":"e70eade7-49f6-44e1-82e9-4286c04a22d9","queryName":"DestinationForWriteToDatabaseTableFrom_Votes"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes":{"queryId":"f435fec2-6ea7-4d2f-9e09-d542aebcc7aa","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes"},"TransformForOutputToDatabaseTableFrom_Votes":{"queryId":"0bf8b976-a570-4c95-8408-4d1cb5ef397c","queryName":"TransformForOutputToDatabaseTableFrom_Votes"}},"document":"section Section1;\r\nshared DefaultDestination = let\r\n  DefaultDestination = Lakehouse.Contents(null){[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data]{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data]\r\nin\r\n  DefaultDestination;\r\nshared Badges = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Badges\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared Comments = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Comments\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared LinkTypes = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"LinkTypes\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared PostLinks = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"PostLinks\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared Posts = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Posts\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared PostTypes = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"PostTypes\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared Users = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Users\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared Votes = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Votes\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared VoteTypes = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"VoteTypes\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared DestinationForWriteToDatabaseTableFrom_Badges = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Badges\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Id = Int64.Type, Name = text, UserId = Int64.Type, Date = datetime], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Badges], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Badges), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges;\r\nshared TransformForOutputToDatabaseTableFrom_Badges = let\r\n    SourceTable = Table.SelectColumns(Badges, {\"Id\", \"Name\", \"UserId\", \"Date\"})\r\nin\r\n    SourceTable;\r\nshared DefaultModelStorage = let\r\n  DefaultModelStorage = Pipeline.DefaultModelStorage()\r\nin\r\n  DefaultModelStorage;\r\nshared DestinationForWriteToDatabaseTableFrom_Comments = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Comments\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Id = Int64.Type, CreationDate = datetime, PostId = Int64.Type, Score = nullable Int64.Type, Text = text, UserId = nullable Int64.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Comments], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Comments), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments;\r\nshared TransformForOutputToDatabaseTableFrom_Comments = let\r\n    SourceTable = Table.SelectColumns(Comments, {\"Id\", \"CreationDate\", \"PostId\", \"Score\", \"Text\", \"UserId\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_LinkTypes = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"LinkTypes\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Id = Int64.Type, Type = text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_LinkTypes], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_LinkTypes), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes;\r\nshared TransformForOutputToDatabaseTableFrom_LinkTypes = let\r\n    SourceTable = Table.SelectColumns(LinkTypes, {\"Id\", \"Type\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_PostLinks = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"PostLinks\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Id = Int64.Type, CreationDate = datetime, PostId = Int64.Type, RelatedPostId = Int64.Type, LinkTypeId = Int64.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_PostLinks], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_PostLinks), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks;\r\nshared TransformForOutputToDatabaseTableFrom_PostLinks = let\r\n    SourceTable = Table.SelectColumns(PostLinks, {\"Id\", \"CreationDate\", \"PostId\", \"RelatedPostId\", \"LinkTypeId\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_PostTypes = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"PostTypes\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Id = Int64.Type, Type = text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_PostTypes], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_PostTypes), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes;\r\nshared TransformForOutputToDatabaseTableFrom_PostTypes = let\r\n    SourceTable = Table.SelectColumns(PostTypes, {\"Id\", \"Type\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_Posts = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Posts\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Id = Int64.Type, AcceptedAnswerId = nullable Int64.Type, AnswerCount = nullable Int64.Type, Body = text, ClosedDate = nullable datetime, CommentCount = nullable Int64.Type, CommunityOwnedDate = nullable datetime, CreationDate = datetime, FavoriteCount = nullable Int64.Type, LastActivityDate = datetime, LastEditDate = nullable datetime, LastEditorDisplayName = nullable text, LastEditorUserId = nullable Int64.Type, OwnerUserId = nullable Int64.Type, ParentId = nullable Int64.Type, PostTypeId = Int64.Type, Score = Int64.Type, Tags = nullable text, Title = nullable text, ViewCount = Int64.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Posts], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Posts), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts;\r\nshared TransformForOutputToDatabaseTableFrom_Posts = let\r\n    SourceTable = Table.SelectColumns(Posts, {\"Id\", \"AcceptedAnswerId\", \"AnswerCount\", \"Body\", \"ClosedDate\", \"CommentCount\", \"CommunityOwnedDate\", \"CreationDate\", \"FavoriteCount\", \"LastActivityDate\", \"LastEditDate\", \"LastEditorDisplayName\", \"LastEditorUserId\", \"OwnerUserId\", \"ParentId\", \"PostTypeId\", \"Score\", \"Tags\", \"Title\", \"ViewCount\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_Users = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Users\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Id = Int64.Type, AboutMe = nullable text, Age = nullable Int64.Type, CreationDate = datetime, DisplayName = text, DownVotes = Int64.Type, EmailHash = nullable text, LastAccessDate = datetime, Location = nullable text, Reputation = Int64.Type, UpVotes = Int64.Type, Views = Int64.Type, WebsiteUrl = nullable text, AccountId = nullable Int64.Type], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Users], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Users), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users;\r\nshared TransformForOutputToDatabaseTableFrom_Users = let\r\n    SourceTable = Table.SelectColumns(Users, {\"Id\", \"AboutMe\", \"Age\", \"CreationDate\", \"DisplayName\", \"DownVotes\", \"EmailHash\", \"LastAccessDate\", \"Location\", \"Reputation\", \"UpVotes\", \"Views\", \"WebsiteUrl\", \"AccountId\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_VoteTypes = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"VoteTypes\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Id = Int64.Type, Name = text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_VoteTypes], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_VoteTypes), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes;\r\nshared TransformForOutputToDatabaseTableFrom_VoteTypes = let\r\n    SourceTable = Table.SelectColumns(VoteTypes, {\"Id\", \"Name\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_Votes = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Votes\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Id = Int64.Type, PostId = Int64.Type, UserId = nullable Int64.Type, BountyAmount = nullable Int64.Type, VoteTypeId = Int64.Type, CreationDate = datetime], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Votes], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Votes), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes;\r\nshared TransformForOutputToDatabaseTableFrom_Votes = let\r\n    SourceTable = Table.SelectColumns(Votes, {\"Id\", \"PostId\", \"UserId\", \"BountyAmount\", \"VoteTypeId\", \"CreationDate\"})\r\nin\r\n    SourceTable;\r\n","connectionOverrides":[{"path":"Lakehouse","kind":"Lakehouse","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Lakehouse\",\"path\":\"Lakehouse\"}","audience":null},{"path":"vmsql01\\SQL_NSOD;StackOverflow2010","kind":"SQL","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"cf47b4cd-6ade-4999-8923-fcfdbcb39352","audience":null}]}}