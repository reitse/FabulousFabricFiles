{"name":"df read data from on-prem SQL Server","description":"Reading data from an on-premises SQL Server. Read the StackOverflow2010 database and write the data into OneLake","ppdf:dataflowId":"31c1a9c4-ad94-4399-87fd-764ac907272e","ppdf:owner":{"tenantId":"e2c852c9-a592-4198-8b26-76695664931e","userId":"aefcfa2c-e7f1-4392-b701-cffd823e827d"},"ppdf:fastCopy":false,"version":"1.0","culture":"en-US","modifiedTime":"2023-07-27T08:19:18.5829302+00:00","ppdf:outputFileFormat":"Parquet","pbi:mashup":{"fastCombine":false,"allowNativeQueries":false,"queriesMetadata":{"DefaultDestination":{"queryId":"8e1cddf2-8281-447a-afa8-1384eb9f5321","queryName":"DefaultDestination"},"Badges":{"queryId":"36b6a66d-f067-4b9e-b949-2ca00e4724f9","queryName":"Badges","loadEnabled":true},"Comments":{"queryId":"afaa6774-faad-4df0-a232-214e0c8e4697","queryName":"Comments","loadEnabled":true},"LinkTypes":{"queryId":"371ebaea-35c1-4806-9a7a-c81504a9b734","queryName":"LinkTypes","loadEnabled":true},"PostLinks":{"queryId":"99def4cd-ae91-4530-a444-ec15f8d3feca","queryName":"PostLinks","loadEnabled":true},"Posts":{"queryId":"45d8a8ba-33f5-4bc8-b08a-3bff439cf655","queryName":"Posts","loadEnabled":true},"PostTypes":{"queryId":"cddf9d34-c4b7-421e-b3cd-fadcbd39e381","queryName":"PostTypes","loadEnabled":true},"Users":{"queryId":"d9df3efe-bfec-45e3-85db-f9db9558c1f0","queryName":"Users","loadEnabled":true},"Votes":{"queryId":"921842c9-09c0-4e1e-b3ed-f7450d48d15e","queryName":"Votes","loadEnabled":true},"VoteTypes":{"queryId":"6a77f322-6c0a-45f8-93ee-03810f7598f1","queryName":"VoteTypes","loadEnabled":true},"DestinationForWriteToDatabaseTableFrom_Badges":{"queryId":"f5466c5d-5e0d-401d-b6a6-d24c55c0f931","queryName":"DestinationForWriteToDatabaseTableFrom_Badges"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges":{"queryId":"976cb0aa-d5c9-4b82-bc8a-95ae403ba1e0","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges"},"TransformForOutputToDatabaseTableFrom_Badges":{"queryId":"6fb65a8f-5e00-49c6-8941-3fa9eda43d30","queryName":"TransformForOutputToDatabaseTableFrom_Badges"},"DefaultStaging":{"queryId":"61f00b39-a850-4210-aab6-0beff9241998","queryName":"DefaultStaging"},"DestinationForWriteToDatabaseTableFrom_Comments":{"queryId":"cf146f91-dc96-4d45-93d8-036859a420f9","queryName":"DestinationForWriteToDatabaseTableFrom_Comments"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments":{"queryId":"ac32f355-ec67-43c2-993e-5b943d9d79db","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments"},"TransformForOutputToDatabaseTableFrom_Comments":{"queryId":"deff7acb-5666-47e0-88ab-dfdd46daca2f","queryName":"TransformForOutputToDatabaseTableFrom_Comments"},"DestinationForWriteToDatabaseTableFrom_LinkTypes":{"queryId":"2a9a96ef-577c-44ea-a10c-87fc60b53f64","queryName":"DestinationForWriteToDatabaseTableFrom_LinkTypes"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes":{"queryId":"fb6ac4d0-7aac-48ee-b4c6-95452398f4c0","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes"},"TransformForOutputToDatabaseTableFrom_LinkTypes":{"queryId":"6f2c637c-103b-4387-9ebd-2c75b6a7302c","queryName":"TransformForOutputToDatabaseTableFrom_LinkTypes"},"DestinationForWriteToDatabaseTableFrom_PostLinks":{"queryId":"3f48e3c3-cd7a-4f47-a5bc-7db0d7c5f396","queryName":"DestinationForWriteToDatabaseTableFrom_PostLinks"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks":{"queryId":"10ef7469-f2e4-461d-802a-dbcc9587bfd3","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks"},"TransformForOutputToDatabaseTableFrom_PostLinks":{"queryId":"1bdeb842-e6ce-4ecb-8801-2965640fb179","queryName":"TransformForOutputToDatabaseTableFrom_PostLinks"},"DestinationForWriteToDatabaseTableFrom_Posts":{"queryId":"f6c703c2-886f-487e-ad58-6014fa3bcb7d","queryName":"DestinationForWriteToDatabaseTableFrom_Posts"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts":{"queryId":"3adb586c-1686-40d3-ab9f-001f9a41e908","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts"},"TransformForOutputToDatabaseTableFrom_Posts":{"queryId":"38b15846-994f-4374-9483-641acd4a4999","queryName":"TransformForOutputToDatabaseTableFrom_Posts"},"DestinationForWriteToDatabaseTableFrom_PostTypes":{"queryId":"8f82e252-6d28-498c-afde-fc57ba3348c6","queryName":"DestinationForWriteToDatabaseTableFrom_PostTypes"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes":{"queryId":"86f2c257-31e2-4106-8f6c-ca87751c9a09","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes"},"TransformForOutputToDatabaseTableFrom_PostTypes":{"queryId":"80f668a3-57a6-4c21-8689-d95cb3250f06","queryName":"TransformForOutputToDatabaseTableFrom_PostTypes"},"DestinationForWriteToDatabaseTableFrom_Users":{"queryId":"9ca12591-9169-496e-a9f2-aae45d2fcbe1","queryName":"DestinationForWriteToDatabaseTableFrom_Users"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users":{"queryId":"185b5220-b438-45c2-b942-3de25bf9bb1c","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users"},"TransformForOutputToDatabaseTableFrom_Users":{"queryId":"d1f6f8df-c51e-4ce1-9af3-442b4fa7db46","queryName":"TransformForOutputToDatabaseTableFrom_Users"},"DestinationForWriteToDatabaseTableFrom_Votes":{"queryId":"6e235d3a-dc89-44e4-9c7d-f582d4b96ece","queryName":"DestinationForWriteToDatabaseTableFrom_Votes"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes":{"queryId":"fc190ac6-13dc-4a6f-a1ef-7db5ab4ef9ba","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes"},"TransformForOutputToDatabaseTableFrom_Votes":{"queryId":"4f970f68-e867-4346-b5f6-a82c32fe3d2d","queryName":"TransformForOutputToDatabaseTableFrom_Votes"},"DestinationForWriteToDatabaseTableFrom_VoteTypes":{"queryId":"194bacf4-88a9-4861-8df4-8c5a7eaed085","queryName":"DestinationForWriteToDatabaseTableFrom_VoteTypes"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes":{"queryId":"43bb4e39-6a44-4968-85bc-a2e0f926cb1b","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes"},"TransformForOutputToDatabaseTableFrom_VoteTypes":{"queryId":"308d2292-3d28-4740-99f8-380575e33e85","queryName":"TransformForOutputToDatabaseTableFrom_VoteTypes"}},"document":"section Section1;\r\nshared DefaultDestination = let\r\n  DefaultDestination = Lakehouse.Contents(null){[workspaceId = \"a6df6f51-7555-4607-a7a8-b56e284c62d1\"]}[Data]{[lakehouseId = \"f1f27e23-4e5d-4147-bfb9-de187b982eff\"]}[Data]\r\nin\r\n  DefaultDestination;\r\nshared Badges = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Badges\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared Comments = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Comments\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared LinkTypes = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"LinkTypes\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared PostLinks = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"PostLinks\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared Posts = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Posts\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared PostTypes = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"PostTypes\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared Users = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Users\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared Votes = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"Votes\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared VoteTypes = let\r\n  Source = Sql.Database(\"vmsql01\\SQL_NSOD\", \"StackOverflow2010\"),\r\n  #\"Navigation 1\" = Source{[Schema = \"dbo\", Item = \"VoteTypes\"]}[Data]\r\nin\r\n  #\"Navigation 1\";\r\nshared DefaultStaging = let\r\n  DefaultStaging = Pipeline.DefaultModelStorage()\r\nin\r\n  DefaultStaging;\r\nshared DestinationForWriteToDatabaseTableFrom_Badges = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Badges\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Name = text, Date = datetime], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Badges], (txn) => {TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Badges), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Badges;\r\nshared TransformForOutputToDatabaseTableFrom_Badges = let\r\n    SourceTable = Table.SelectColumns(Badges, {\"Name\", \"Date\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_Comments = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Comments\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[CreationDate = datetime, Text = text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Comments], (txn) => {TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Comments), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Comments;\r\nshared TransformForOutputToDatabaseTableFrom_Comments = let\r\n    SourceTable = Table.SelectColumns(Comments, {\"CreationDate\", \"Text\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_LinkTypes = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"LinkTypes\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Type = text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_LinkTypes], (txn) => {TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_LinkTypes), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_LinkTypes;\r\nshared TransformForOutputToDatabaseTableFrom_LinkTypes = let\r\n    SourceTable = Table.SelectColumns(LinkTypes, {\"Type\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_PostLinks = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"PostLinks\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[CreationDate = datetime], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_PostLinks], (txn) => {TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_PostLinks), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostLinks;\r\nshared TransformForOutputToDatabaseTableFrom_PostLinks = let\r\n    SourceTable = Table.SelectColumns(PostLinks, {\"CreationDate\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_Posts = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Posts\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Body = text, ClosedDate = nullable datetime, CommunityOwnedDate = nullable datetime, CreationDate = datetime, LastActivityDate = datetime, LastEditDate = nullable datetime, LastEditorDisplayName = nullable text, Tags = nullable text, Title = nullable text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Posts], (txn) => {TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Posts), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Posts;\r\nshared TransformForOutputToDatabaseTableFrom_Posts = let\r\n    SourceTable = Table.SelectColumns(Posts, {\"Body\", \"ClosedDate\", \"CommunityOwnedDate\", \"CreationDate\", \"LastActivityDate\", \"LastEditDate\", \"LastEditorDisplayName\", \"Tags\", \"Title\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_PostTypes = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"PostTypes\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Type = text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_PostTypes], (txn) => {TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_PostTypes), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_PostTypes;\r\nshared TransformForOutputToDatabaseTableFrom_PostTypes = let\r\n    SourceTable = Table.SelectColumns(PostTypes, {\"Type\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_Users = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Users\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[AboutMe = nullable text, CreationDate = datetime, DisplayName = text, EmailHash = nullable text, LastAccessDate = datetime, Location = nullable text, WebsiteUrl = nullable text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Users], (txn) => {TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Users), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Users;\r\nshared TransformForOutputToDatabaseTableFrom_Users = let\r\n    SourceTable = Table.SelectColumns(Users, {\"AboutMe\", \"CreationDate\", \"DisplayName\", \"EmailHash\", \"LastAccessDate\", \"Location\", \"WebsiteUrl\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_Votes = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"Votes\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[CreationDate = datetime], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Votes], (txn) => {TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Votes), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Votes;\r\nshared TransformForOutputToDatabaseTableFrom_Votes = let\r\n    SourceTable = Table.SelectColumns(Votes, {\"CreationDate\"})\r\nin\r\n    SourceTable;\r\nshared DestinationForWriteToDatabaseTableFrom_VoteTypes = let\r\n  Target = DefaultDestination,\r\n  TableNavigation = Target{[ItemKind = \"Table\", Id = \"VoteTypes\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Name = text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_VoteTypes], (txn) => {TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_VoteTypes), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_VoteTypes;\r\nshared TransformForOutputToDatabaseTableFrom_VoteTypes = let\r\n    SourceTable = Table.SelectColumns(VoteTypes, {\"Name\"})\r\nin\r\n    SourceTable;\r\n","connectionOverrides":[{"path":"Lakehouse","kind":"Lakehouse","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Lakehouse\",\"path\":\"Lakehouse\"}","audience":null},{"path":"vmsql01\\SQL_NSOD;StackOverflow2010","kind":"SQL","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"cf47b4cd-6ade-4999-8923-fcfdbcb39352","audience":null}]},"entities":[{"$type":"LocalEntity","name":"Badges","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Badges.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"Id\"]}]"}],"attributes":[{"name":"Id","dataType":"int64"},{"name":"Name","dataType":"string"},{"name":"UserId","dataType":"int64"},{"name":"Date","dataType":"dateTime"}]},{"$type":"LocalEntity","name":"Comments","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Comments.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"Id\"]}]"}],"attributes":[{"name":"Id","dataType":"int64"},{"name":"CreationDate","dataType":"dateTime"},{"name":"PostId","dataType":"int64"},{"name":"Score","dataType":"int64"},{"name":"Text","dataType":"string"},{"name":"UserId","dataType":"int64"}]},{"$type":"LocalEntity","name":"LinkTypes","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"LinkTypes.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"Id\"]}]"}],"attributes":[{"name":"Id","dataType":"int64"},{"name":"Type","dataType":"string"}]},{"$type":"LocalEntity","name":"PostLinks","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"PostLinks.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"Id\"]}]"}],"attributes":[{"name":"Id","dataType":"int64"},{"name":"CreationDate","dataType":"dateTime"},{"name":"PostId","dataType":"int64"},{"name":"RelatedPostId","dataType":"int64"},{"name":"LinkTypeId","dataType":"int64"}]},{"$type":"LocalEntity","name":"Posts","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Posts.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"Id\"]}]"}],"attributes":[{"name":"Id","dataType":"int64"},{"name":"AcceptedAnswerId","dataType":"int64"},{"name":"AnswerCount","dataType":"int64"},{"name":"Body","dataType":"string"},{"name":"ClosedDate","dataType":"dateTime"},{"name":"CommentCount","dataType":"int64"},{"name":"CommunityOwnedDate","dataType":"dateTime"},{"name":"CreationDate","dataType":"dateTime"},{"name":"FavoriteCount","dataType":"int64"},{"name":"LastActivityDate","dataType":"dateTime"},{"name":"LastEditDate","dataType":"dateTime"},{"name":"LastEditorDisplayName","dataType":"string"},{"name":"LastEditorUserId","dataType":"int64"},{"name":"OwnerUserId","dataType":"int64"},{"name":"ParentId","dataType":"int64"},{"name":"PostTypeId","dataType":"int64"},{"name":"Score","dataType":"int64"},{"name":"Tags","dataType":"string"},{"name":"Title","dataType":"string"},{"name":"ViewCount","dataType":"int64"}]},{"$type":"LocalEntity","name":"PostTypes","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"PostTypes.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"Id\"]}]"}],"attributes":[{"name":"Id","dataType":"int64"},{"name":"Type","dataType":"string"}]},{"$type":"LocalEntity","name":"Users","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Users.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"Id\"]}]"}],"attributes":[{"name":"Id","dataType":"int64"},{"name":"AboutMe","dataType":"string"},{"name":"Age","dataType":"int64"},{"name":"CreationDate","dataType":"dateTime"},{"name":"DisplayName","dataType":"string"},{"name":"DownVotes","dataType":"int64"},{"name":"EmailHash","dataType":"string"},{"name":"LastAccessDate","dataType":"dateTime"},{"name":"Location","dataType":"string"},{"name":"Reputation","dataType":"int64"},{"name":"UpVotes","dataType":"int64"},{"name":"Views","dataType":"int64"},{"name":"WebsiteUrl","dataType":"string"},{"name":"AccountId","dataType":"int64"}]},{"$type":"LocalEntity","name":"Votes","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Votes.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"Id\"]}]"}],"attributes":[{"name":"Id","dataType":"int64"},{"name":"PostId","dataType":"int64"},{"name":"UserId","dataType":"int64"},{"name":"BountyAmount","dataType":"int64"},{"name":"VoteTypeId","dataType":"int64"},{"name":"CreationDate","dataType":"dateTime"}]},{"$type":"LocalEntity","name":"VoteTypes","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"VoteTypes.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"Id\"]}]"}],"attributes":[{"name":"Id","dataType":"int64"},{"name":"Name","dataType":"string"}]}]}